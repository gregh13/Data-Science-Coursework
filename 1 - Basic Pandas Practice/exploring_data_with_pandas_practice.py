# -*- coding: utf-8 -*-
"""Exploring Data with Pandas Practice

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16A04U1ILbh2PbTOaPTNOMqBVMIavqYFS

# Exploring Data with Pandas Practice
"""

import pandas as pd
df = pd.read_csv('salaries_by_college_major.csv')
df.head()

df.shape

df.columns

df.isna()

df.tail()

clean_df = df.dropna()
clean_df.tail()

starting_salaries = clean_df['Starting Median Salary']
starting_salaries

max_start = starting_salaries.max()
max_start

id_max_start = starting_salaries.idxmax()
id_max_start

clean_df.loc[43]

clean_df['Undergraduate Major'][43]

mid_career_max_salary = clean_df['Mid-Career Median Salary'].idxmax()
print(f'id: {mid_career_max_salary}\n')

clean_df.loc[mid_career_max_salary]

lowest_starting_salary = clean_df.loc[clean_df['Starting Median Salary'].idxmin()]
lowest_starting_salary

lowest_mid_career_salary = clean_df.loc[clean_df['Mid-Career Median Salary'].idxmin()]
lowest_mid_career_salary

# Check difference between two columns:
mid_career_salary_difference = clean_df['Mid-Career 90th Percentile Salary'] - clean_df['Mid-Career 10th Percentile Salary']
mid_career_salary_difference
other_way = clean_df['Mid-Career 90th Percentile Salary'].subtract(clean_df['Mid-Career 10th Percentile Salary'])
salary_spread_col = mid_career_salary_difference
# Insert new column into table: (position, Column Name, data)
clean_df.insert(1, "Salary Spread", salary_spread_col)
clean_df.head()

low_risk = clean_df.sort_values('Salary Spread')
# Double brackets to specify showing just a few columns, can change number shown in 'head'
low_risk[['Undergraduate Major', 'Salary Spread', 'Mid-Career Median Salary']].head(n=10)

high_risk_salaries = clean_df.sort_values('Salary Spread', ascending=False)
high_risk_salaries.head()

highest_salaries = clean_df.sort_values('Mid-Career 90th Percentile Salary', ascending=False)
# printing the main data table itself is ugly, column names too long, make the table split
highest_salaries
# better to narrow it down so everything is together
highest_salaries[['Undergraduate Major', 'Mid-Career 90th Percentile Salary', 'Group']]

clean_df.groupby('Group').count()

clean_df.groupby('Group').mean()

# Tell pandas to make data display differently: (Note it works retroactively to all data tables above)
pd.options.display.float_format = '{:,.2f}'.format
clean_df.groupby('Group').mean()

