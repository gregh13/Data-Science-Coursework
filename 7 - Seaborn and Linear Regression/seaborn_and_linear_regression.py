# -*- coding: utf-8 -*-
"""Seaborn_and_Linear_Regression_Day_77

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JtYv6RJw3UljGC40HLy2nefScToS3spE

# Introduction

Do higher film budgets lead to more box office revenue? Let's find out if there's a relationship using the movie budgets and financial performance data that I've scraped from [the-numbers.com](https://www.the-numbers.com/movie/budgets) on **May 1st, 2018**. 

<img src=https://i.imgur.com/kq7hrEh.png>

# Import Statements
"""

import pandas as pd
import matplotlib.pyplot as plt

import seaborn as sns
from sklearn.linear_model import LinearRegression

"""# Notebook Presentation"""

pd.options.display.float_format = '{:,.2f}'.format

from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()

"""# Read the Data"""

data = pd.read_csv('cost_revenue_dirty.csv')

"""# Explore and Clean the Data

**Challenge**: Answer these questions about the dataset:
1. How many rows and columns does the dataset contain?
2. Are there any NaN values present?
3. Are there any duplicate rows?
4. What are the data types of the columns?
"""

print(data.shape)
print(data.describe())
data.sample(10)

print(data.isna().values.any())
print(data.duplicated().values.any())
# Not good enough, some movies have remakes
print(data.duplicated(subset='Movie_Title').values.any())
# Have to check that it's really the same
dupes = data[data.duplicated(subset=['Release_Date','Movie_Title']) == True]
dupes.index
data.drop(dupes.index, inplace=True)
# Now, just one:
data[data.Movie_Title == 'A Dog\'s Breakfast']

data.info()

"""### Data Type Conversions

**Challenge**: Convert the `USD_Production_Budget`, `USD_Worldwide_Gross`, and `USD_Domestic_Gross` columns to a numeric format by removing `$` signs and `,`. 
<br>
<br>
Note that *domestic* in this context refers to the United States.
"""

# My Way
# data.USD_Production_Budget = data.USD_Production_Budget.str.replace(",","")
# data.USD_Production_Budget = data.USD_Production_Budget.str.replace("$","")
# data.USD_Production_Budget = pd.to_numeric(data.USD_Production_Budget)
# data.info()

# Her Way
chars_to_remove = [",", '$']
cols_to_clean = ['USD_Production_Budget', 'USD_Worldwide_Gross', 'USD_Domestic_Gross']

for col in cols_to_clean:
  for char in chars_to_remove:
    data[col] = data[col].str.replace(char, "")
  data[col] = pd.to_numeric(data[col])

data.info()

"""**Challenge**: Convert the `Release_Date` column to a Pandas Datetime type. """

data.Release_Date = pd.to_datetime(data.Release_Date)
data.info()

data.head()

data[data.Movie_Title == 'John Carter']

"""### Descriptive Statistics

**Challenge**: 

1. What is the average production budget of the films in the data set?
2. What is the average worldwide gross revenue of films?
3. What were the minimums for worldwide and domestic revenue?
4. Are the bottom 25% of films actually profitable or do they lose money?
5. What are the highest production budget and highest worldwide gross revenue of any film?
6. How much revenue did the lowest and highest budget films make?
"""

print(data.USD_Production_Budget.mean())
data.describe()

data[data.USD_Production_Budget == 1100]

data[data.USD_Production_Budget == 425000000]

"""# Investigating the Zero Revenue Films

**Challenge** How many films grossed $0 domestically (i.e., in the United States)? What were the highest budget films that grossed nothing?
"""

zero_domestic = data[data.USD_Domestic_Gross == 0]
zero_domestic

"""**Challenge**: How many films grossed $0 worldwide? What are the highest budget films that had no revenue internationally?"""

zero_worldwide = data[data.USD_Worldwide_Gross == 0]
zero_worldwide

"""### Filtering on Multiple Conditions"""

# Need to use the special and sign & and put the individual search criteria in parenthesis
international_releases = data.loc[(data.USD_Domestic_Gross == 0) & 
                                  (data.USD_Worldwide_Gross != 0)]
international_releases

"""**Challenge**: Use the [`.query()` function](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html) to accomplish the same thing. Create a subset for international releases that had some worldwide gross revenue, but made zero revenue in the United States. 

Hint: This time you'll have to use the `and` keyword.
"""

# All of it needs to be a single string query, using the actual word 'and'
international_releases_query = data.query('USD_Domestic_Gross == 0 and USD_Worldwide_Gross != 0')
international_releases_query

"""### Unreleased Films

**Challenge**:
* Identify which films were not released yet as of the time of data collection (May 1st, 2018).
* How many films are included in the dataset that have not yet had a chance to be screened in the box office? 
* Create another DataFrame called data_clean that does not include these films. 
"""

# Date of Data Collection
scrape_date = pd.Timestamp('2018-5-1')

not_released = data[data.Release_Date >= scrape_date]
not_released

# Note: need to use .index when droping a group of rows. 
# Just the name not_released includes the column names and creates an error
data_clean = data.drop(not_released.index)

"""### Films that Lost Money

**Challenge**: 
What is the percentage of films where the production costs exceeded the worldwide gross revenue? 
"""

# Worldwide is always either equal to or greater than Domestic, so we use that to measure against budget
# Calculate percentage by number of rows (using len() or shape[0])
money_losing_films = data_clean[data_clean.USD_Production_Budget > data_clean.USD_Worldwide_Gross]
print(money_losing_films)
money_losing_films.shape[0]/data_clean.shape[0]

"""# Seaborn for Data Viz: Bubble Charts"""

sns.scatterplot(data=data_clean,
                x='USD_Production_Budget', 
                y='USD_Worldwide_Gross')

# Seaborn is built ontop of Matplotlib, so we can use it's configuration and notation
plt.figure(figsize=(8,4), dpi=200)
 
ax = sns.scatterplot(data=data_clean,
                     x='USD_Production_Budget', 
                     y='USD_Worldwide_Gross')
 
ax.set(ylim=(0, 3000000000),
       xlim=(0, 450000000),
       ylabel='Revenue in $ billions',
       xlabel='Budget in $100 millions')
 
plt.show()

plt.figure(figsize=(8,4), dpi=200)
ax = sns.scatterplot(data=data_clean,
                     x='USD_Production_Budget', 
                     y='USD_Worldwide_Gross',
                     hue='USD_Worldwide_Gross', # colour
                     size='USD_Worldwide_Gross',) # dot size
 
ax.set(ylim=(0, 3000000000),
       xlim=(0, 450000000),
       ylabel='Revenue in $ billions',
       xlabel='Budget in $100 millions',)
 
plt.show()

# Use 'with' to only style this one graph and not all in the Notebook
plt.figure(figsize=(8,4), dpi=200)
 
# set styling on a single chart -- NOTE: 'DARKGRID'
with sns.axes_style('darkgrid'):
  ax = sns.scatterplot(data=data_clean,
                       x='USD_Production_Budget', 
                       y='USD_Worldwide_Gross',
                       hue='USD_Worldwide_Gross',
                       size='USD_Worldwide_Gross')
 
  ax.set(ylim=(0, 3000000000),
        xlim=(0, 450000000),
        ylabel='Revenue in $ billions',
        xlabel='Budget in $100 millions')

"""### Plotting Movie Releases over Time

**Challenge**: Try to create the following Bubble Chart:

<img src=https://i.imgur.com/8fUn9T6.png>


"""

plt.figure(figsize=(8,4), dpi=200)

with sns.axes_style('darkgrid'):
  ax = sns.scatterplot(data=data_clean,
                       x='Release_Date', 
                       y='USD_Production_Budget',
                       hue='USD_Worldwide_Gross',
                       size='USD_Worldwide_Gross')
  ax.set(ylim=(-5000000, 450000000),
      xlim=(data_clean.Release_Date.min(), data_clean.Release_Date.max()),
      xlabel='Year',
      ylabel='Budget in $100 millions')  

plt.show()

"""# Converting Years to Decades Trick

**Challenge**: Create a column in `data_clean` that has the decade of the release. 

<img src=https://i.imgur.com/0VEfagw.png width=650> 

Here's how: 
1. Create a [`DatetimeIndex` object](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DatetimeIndex.html) from the Release_Date column. 
2. Grab all the years from the `DatetimeIndex` object using the `.year` property.
<img src=https://i.imgur.com/5m06Ach.png width=650>
3. Use floor division `//` to convert the year data to the decades of the films.
4. Add the decades as a `Decade` column to the `data_clean` DataFrame.
"""

date_index = pd.DatetimeIndex(data_clean.Release_Date)
# print(Date_Index)
print(date_index.year)
decade = (date_index.year // 10) * 10
decade

data_clean.insert(loc=6, column='Decade', value=decade)
data_clean

# or, just add it like with dictionaries
# data_clean['Decade'] = decade

"""### Separate the "old" (before 1969) and "New" (1970s onwards) Films

**Challenge**: Create two new DataFrames: `old_films` and `new_films`
* `old_films` should include all the films before 1969 (up to and including 1969)
* `new_films` should include all the films from 1970 onwards
* How many films were released prior to 1970?
* What was the most expensive film made prior to 1970?
"""

old_films = data_clean[data_clean.Decade < 1970]
new_films = data_clean[data_clean.Decade >= 1970]
old_films.describe()

old_films.sort_values('USD_Production_Budget', ascending=False)

"""# Seaborn Regression Plots"""

# Linear Regression scatterplot, with a regression line and confidence interval
sns.regplot(data=old_films, 
            x='USD_Production_Budget',
            y='USD_Worldwide_Gross')

# Again, use matplotlib notation to configure our seaborn graph
# scatter_kws targets the dots, 'alpha' changes the transparency of the dots
# line_kws targets the line, can change the color of the line

plt.figure(figsize=(8,4), dpi=200)
with sns.axes_style("whitegrid"):
  sns.regplot(data=old_films, 
            x='USD_Production_Budget', 
            y='USD_Worldwide_Gross',
            scatter_kws = {'alpha': 0.4},
            line_kws = {'color': 'black'})

# We see that the line doesn't capture the data well
# there isn't a strong relationship/correlation between Budget and Revenue for older films

"""**Challenge**: Use Seaborn's `.regplot()` to show the scatter plot and linear regression line against the `new_films`. 
<br>
<br>
Style the chart

* Put the chart on a `'darkgrid'`.
* Set limits on the axes so that they don't show negative values.
* Label the axes on the plot "Revenue in \$ billions" and "Budget in \$ millions".
* Provide HEX colour codes for the plot and the regression line. Make the dots dark blue (#2f4b7c) and the line orange (#ff7c43).

Interpret the chart

* Do our data points for the new films align better or worse with the linear regression than for our older films?
* Roughly how much would a film with a budget of $150 million make according to the regression line?
"""

# Can change color inside scatter_kws, or in the main regplot parameters
plt.figure(figsize=(8,4), dpi=200)
with sns.axes_style("darkgrid"):
  ax = sns.regplot(data=new_films, 
            x='USD_Production_Budget', 
            y='USD_Worldwide_Gross',
            color='#ff7c43',
            scatter_kws={'alpha': 0.4,
                        'color': '#2f4b7c'},
            line_kws={'color': '#ff7c43'})
  ax.set(ylim=(-50000000, 3000000000),
      xlim=(-3000000, 450000000),
      xlabel='Budget in $100 millions',
      ylabel='Revenue in $ billions')  
plt.show()

# Confidence interval is narrower and line fits data better = Stronger correlation for budget to revenue in newer films!

"""# Run Your Own Regression with scikit-learn

$$ REV \hat ENUE = \theta _0 + \theta _1 BUDGET$$
"""

# create regression object to work with from scikit-learn:
regression = LinearRegression()

# Now we should specify our features and our targets (i.e., our response variable). 
# You will often see the features named capital X and the target named lower case y
# NOTE: sci-kit does not like Pandas Series, so need to make a new Dataframe with just the column

# Explanatory Variable or Feature
X = pd.DataFrame(new_films, columns=['USD_Production_Budget'])
 
# Response Variable or Target
y = pd.DataFrame(new_films, columns=['USD_Worldwide_Gross'])

# Find the best-fit line
regression.fit(X, y)

# Get y intercept:
regression.intercept_

# At 0 budget, the line shows -8.6 million

# Get slope of the line
regression.coef_

# For every dollar spent on the budget, the revenue goes up by 3 dollars

# R-squared
regression.score(X, y)

"""**Challenge**: Run a linear regression for the `old_films`. Calculate the intercept, slope and r-squared. How much of the variance in movie revenue does the linear model explain in this case?"""

# NOTE: Only one regression line can exist at a time, so need to load up the X and y, plus the regression.fit each time
# Regression model for OLD films
# Explanatory Variable or Feature
X = pd.DataFrame(old_films, columns=['USD_Production_Budget'])
 
# Response Variable or Target
y = pd.DataFrame(old_films, columns=['USD_Worldwide_Gross'])
regression.fit(X, y)
print(f'Intercept: {regression.intercept_} = +$22 million')
print(f'Slope: {regression.coef_} = $1.64 of revenue for $1 of budget')

# R-squared
regression.score(X, y)

"""# Use Your Model to Make a Prediction

We just estimated the slope and intercept! Remember that our Linear Model has the following form:

$$ REV \hat ENUE = \theta _0 + \theta _1 BUDGET$$

**Challenge**:  How much global revenue does our model estimate for a film with a budget of $350 million? 
"""

print(f'Full amount: {22821538 + 1.64771314 * 350000000}\n')

# Or, using the regression object, you could also work it out like this:

budget = 350000000
revenue_estimate = regression.intercept_[0] + regression.coef_[0,0]*budget

# round negative integer means it goes left
revenue_estimate = round(revenue_estimate, -4)

# NOTE: The colon : and dot . in a print statement is quite handy for 
#       controlling the number of digits you'd like to show up in the output)

print(f'The estimated revenue for a $350m film is around ${revenue_estimate:.12}')